# คำอธิบาย Admin Page (หน้าผู้ดูแลระบบ)

## โครงสร้างและการทำงานของหน้า Admin Page

หน้า Admin Page เป็นหน้าสำหรับผู้ดูแลระบบในการจัดการข้อมูลต่างๆ ของเว็บไซต์ E-learning ซึ่งมีหน้าที่สำคัญในการควบคุมและดูแลระบบ

### โครงสร้างหลักของ Admin Page

1. **ส่วนควบคุมการนำทาง (Navigation Tabs)* *
   - Dashboard: แสดงสถิติโดยรวมของระบบ
   - Courses: จัดการข้อมูลคอร์สเรียน
   - Users: จัดการข้อมูลผู้ใช้งาน
   - Settings: ตั้งค่าระบบ

2. **ส่วน Dashboard**
   - แสดงสถิติด่วน เช่น จำนวนคอร์สทั้งหมด จำนวนผู้ใช้งาน
   - แสดงอัตราการเรียนจบและความพึงพอใจ

3. **ส่วนจัดการคอร์ส (Courses Management)**
   - แสดงรายการคอร์สเรียนทั้งหมด
   - มีฟังก์ชันค้นหาและกรองข้อมูล
   - สามารถเพิ่ม แก้ไข หรือลบคอร์สได้

4. **ส่วนจัดการผู้ใช้งาน (Users Management)**
   - แสดงรายการผู้ใช้งานทั้งหมด
   - สามารถจัดการสถานะและบทบาทของผู้ใช้งานได้

5. **ส่วนตั้งค่าระบบ (Settings)**
   - ตั้งค่าข้อมูลเว็บไซต์
   - ตั้งค่าอีเมลผู้ดูแลระบบ

### การทำงานของ Admin Page

1. **การโหลดหน้าเว็บ**
   - เมื่อผู้ดูแลระบบเข้าสู่ระบบ ระบบจะโหลดหน้า [page.tsx](file:///c:/Users/Earth/Desktop/CSMJU_Elearning/csmju-learning/src/app/admin/page.tsx) ในโฟลเดอร์ admin
   - ตรวจสอบสิทธิ์การเข้าถึงของผู้ใช้งาน

2. **การแสดงข้อมูล**
   - ดึงข้อมูลคอร์สและผู้ใช้งานจากฐานข้อมูล
   - แสดงข้อมูลในรูปแบบตารางที่สามารถจัดการได้

3. **การจัดการข้อมูล**
   - สามารถเพิ่ม แก้ไข หรือลบข้อมูลได้ผ่าน Interface
   - มีการยืนยันก่อนการลบข้อมูลสำคัญ

### การตกแต่งด้วย CSS

1. **การใช้ CSS Modules**
   - ใช้ไฟล์ [admin.css](file:///c:/Users/Earth/Desktop/CSMJU_Elearning/csmju-learning/src/app/admin/admin.css) สำหรับการจัดรูปแบบเฉพาะของหน้า Admin
   - ใช้ CSS Variables ในการจัดการสีของธีม

2. **การจัด Layout**
   - ใช้ Flexbox ในการจัดวางองค์ประกอบ
   - ใช้ CSS Grid สำหรับการแสดงข้อมูลในตาราง

3. **Responsive Design**
   - รองรับการแสดงผลบนทุกขนาดหน้าจอ
   - ปรับเปลี่ยน Layout ตามขนาดหน้าจออัตโนมัติ

### เทคโนโลยีที่ใช้

1. **Next.js 15**
   - ใช้ App Router สำหรับการจัดการ Route
   - ใช้ Server Components และ Client Components อย่างเหมาะสม

2. **React 19**
   - ใช้ Hooks ต่างๆ เช่น useState ในการจัดการ State
   - ใช้ Component-Based Architecture ในการสร้าง UI

3. **CSS3**
   - ใช้ CSS Variables สำหรับ Theme
   - ใช้ Flexbox และ Grid สำหรับ Layout
   - ใช้ Animation และ Transition สำหรับ Effects

### ประโยชน์ของการใช้ TypeScript

1. **Type Safety**
   - ช่วยป้องกันข้อผิดพลาดในการจัดการข้อมูล
   - ทำให้โค้ดอ่านเข้าใจง่ายขึ้นโดยเฉพาะในส่วนของ Interface

2. **IntelliSense**
   - ช่วยในการพัฒนาด้วยการแนะนำโค้ดอัตโนมัติ
   - ลดเวลาในการพัฒนาและลดข้อผิดพลาด

3. **การบำรุงรักษา**
   - ทำให้โค้ดมีโครงสร้างที่ชัดเจน
   - ง่ายต่อการปรับปรุงและแก้ไขในอนาคต โดยเฉพาะในระบบที่มีความซับซ้อน